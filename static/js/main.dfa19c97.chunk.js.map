{"version":3,"sources":["pages/Images/1/design1_no_edit.jpg","pages/Images/1/design1_no_fold.jpg","pages/Images/1/design1_sky.jpg","pages/Images/1/design1_colourBalance.jpg","pages/Images/1/design1_levels.jpg","pages/Gif/index.jsx","pages/Images/index.jsx","pages/Mockups/index.jsx","App.js","serviceWorker.js","components/NavBar/index.jsx","index.js"],"names":["module","exports","Gif","images","url","require","Images","href","navStyle","width","height","Mockups","App","path","exact","component","Boolean","window","location","hostname","match","NavBar","className","to","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oMAAAA,EAAOC,QAAU,IAA0B,6C,gBCA3CD,EAAOC,QAAU,IAA0B,6C,gBCA3CD,EAAOC,QAAU,IAA0B,yC,gBCA3CD,EAAOC,QAAU,IAA0B,mD,gBCA3CD,EAAOC,QAAU,IAA0B,4C,oHCc5BC,EAZH,kBAEZ,8BACA,iCACE,sC,yBCFIC,EAAS,CACb,CAAEC,IAAKC,EAAQ,KACf,CAAED,IAAKC,EAAQ,KACf,CAAED,IAAKC,EAAQ,KACf,CAAED,IAAKC,EAAQ,KACf,CAAED,IAAKC,EAAQ,MAkDFC,EA/CA,WAEb,OACF,8BACA,iCACE,sCACA,2FAEA,uCAEA,4BACC,4DAAiC,uBAAGC,KAAK,kCAAR,sBAAjC,mBACA,gEACA,mEACA,4DACA,+DAED,6BACF,kBAAC,IAAD,CACAC,SAAU,EACVC,MAAO,IACPC,OAAQ,IACRP,OAAQA,MAKR,iCAEA,uCAEE,4BACC,4DAAiC,uBAAGI,KAAK,kCAAR,sBAAjC,mBACA,gEACA,mEACA,4DACA,kEClCYI,EAZC,kBAEhB,8BACA,iCACE,2CCgBaC,MAhBf,WACE,OACI,kBAAC,IAAD,KACF,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAM,WAAYC,OAAK,EAACC,UAAWJ,KAE5C,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOE,KAAM,UAAWC,OAAK,EAACC,UAAWT,KAE3C,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOO,KAAM,OAAQC,OAAK,EAACC,UAAWb,OCJxBc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,UCWSC,EAzBA,WAEb,OACE,gCACE,uBAAGC,UAAU,YAAb,2BAGA,6BACE,4BACE,4BACE,kBAAC,IAAD,CAASC,GAAG,WAAWT,OAAK,GAA5B,YAIF,4BACE,kBAAC,IAAD,CAASS,GAAG,WAAZ,WAEF,4BACE,kBAAC,IAAD,CAASA,GAAG,QAAZ,qBCfZC,IAASC,OAEP,kBAAC,IAAD,KACA,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,QAGFC,SAASC,eAAe,SFoHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.dfa19c97.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/design1_no_edit.2e167763.jpg\";","module.exports = __webpack_public_path__ + \"static/media/design1_no_fold.93671fd3.jpg\";","module.exports = __webpack_public_path__ + \"static/media/design1_sky.2dd06984.jpg\";","module.exports = __webpack_public_path__ + \"static/media/design1_colourBalance.96336f94.jpg\";","module.exports = __webpack_public_path__ + \"static/media/design1_levels.f8da9606.jpg\";","import React from 'react'\r\n\r\nconst Gif = () => \r\n\r\n<main>\r\n<section>\r\n  <h1>Gif</h1>\r\n</section>\r\n\r\n</main>\r\n\r\n\r\n\r\n\r\nexport default Gif","import React from 'react'\r\nimport './Images.css'\r\nimport SimpleImageSlider from \"react-simple-image-slider\";\r\n\r\nconst images = [\r\n  { url: require('./1/design1_no_edit.jpg') },\r\n  { url: require('./1/design1_no_fold.jpg') },\r\n  { url: require('./1/design1_sky.jpg') },\r\n  { url: require('./1/design1_colourBalance.jpg') },\r\n  { url: require('./1/design1_levels.jpg') },\r\n];\r\n\r\nconst Images = () => {\r\n\r\n  return (\r\n<main>\r\n<section>\r\n  <h1>Images</h1>\r\n  <p>NOTE: Click on the slider to see the evolution of the images</p>\r\n\r\n  <h2>Image 1</h2>\r\n  \r\n  <ul>\r\n   <li>Original Image: scanned from <a href=\"https://www.wardianlondon.com/\">The Wardian London</a> paper Broucher</li>\r\n   <li>Step 1: Layer to remove the fold</li>\r\n   <li>Step 2: Insert into a different Sky</li>\r\n   <li>Step 3: colour balance layer</li>\r\n   <li>Step 4: adjustment level layer</li>\r\n  </ul>\r\n  <div>\r\n<SimpleImageSlider\r\nnavStyle={2}\r\nwidth={896}\r\nheight={504}\r\nimages={images}\r\n/>\r\n</div>\r\n</section>\r\n\r\n<section>\r\n\r\n<h2>Image 2</h2>\r\n  \r\n  <ul>\r\n   <li>Original Image: scanned from <a href=\"https://www.wardianlondon.com/\">The Wardian London</a> paper Broucher</li>\r\n   <li>Step 1: Layer to remove the fold</li>\r\n   <li>Step 2: Insert into a different Sky</li>\r\n   <li>Step 3: colour balance layer</li>\r\n   <li>Step 4: adjustment level layer</li>\r\n  </ul>\r\n\r\n  </section>\r\n\r\n</main>\r\n\r\n  )\r\n\r\n}\r\n\r\nexport default Images","import React from 'react'\r\n\r\nconst Mockups = () => \r\n\r\n<main>\r\n<section>\r\n  <h1>MOCK-UPs</h1>\r\n</section>\r\n\r\n</main>\r\n\r\n\r\n\r\n\r\nexport default Mockups","import React from 'react';\nimport './App.css';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\nimport { Mockups, Images, Gif } from \"./pages\";\n\n\nfunction App() {\n  return (\n      <BrowserRouter>\n    <Switch>\n      <Route path={'/mockups'} exact component={Mockups} />\n    </Switch>\n    <Switch>\n      <Route path={'/images'} exact component={Images} />\n    </Switch>\n    <Switch>\n      <Route path={'/gif'} exact component={Gif} />\n    </Switch>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport \"./NavBar.css\";\r\n\r\nconst NavBar = () => {\r\n\r\n  return (\r\n    <header>\r\n      <p className=\"cabecera\">\r\n        Visual Design Portfolio\r\n      </p>\r\n      <nav>\r\n        <ul>\r\n          <li>\r\n            <NavLink to=\"/mockups\" exact>\r\n              Mockups\r\n            </NavLink>\r\n          </li>\r\n          <li>\r\n            <NavLink to=\"/images\">Images</NavLink>\r\n          </li>\r\n          <li>\r\n            <NavLink to=\"/gif\">Animated GIF</NavLink>\r\n          </li>\r\n        </ul>\r\n      </nav>\r\n    </header>\r\n  );\r\n};\r\nexport default NavBar;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter as Router} from 'react-router-dom'\nimport { NavBar } from './components'\n\nReactDOM.render(\n\n  <Router>\n  <React.StrictMode>\n    <NavBar />\n    <App />\n  </React.StrictMode>\n  </Router>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}